name: CI Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:8
        ports:
          - 27017:27017

    strategy:
      matrix:
        # Separate services into Node.js and Python-based microservices
        node_service: [auth-service, scraping-matching-service]
        python_service: [email-service, knowledge-base-service, trigger-ai-service]
        language: [node, python]

    steps:
    - uses: actions/checkout@v3

    # Node.js Microservice Testing
    - name: Set up Node.js
      if: matrix.language == 'node'
      uses: actions/setup-node@v3
      with:
         node-version: '20'

    - name: Install Dependencies and Test (Node.js)
      if: matrix.language == 'node'
      run: |
        cd ${{ matrix.node_service }}  # Move into the correct Node.js service directory
        npm install
        npm test

    # Python Microservice Testing
    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install Dependencies and Test (Python)
      if: matrix.language == 'python'
      run: |
        cd ${{ matrix.python_service }}  # Move into the correct Python service directory
        pip install -r requirements.txt
        pytest

    # Integration Testing with Docker Compose
    - name: Build and Run Integration Tests with Docker Compose
      run: |
        docker-compose up --build -d    # Build and run all services
        sleep 15                        # Wait for services to start
        docker-compose exec auth-service npm test                     # Integration test for auth-service
        docker-compose exec scraping-matching-service npm test        # Integration test for scraping-matching-service
        docker-compose exec email-service pytest                      # Integration test for email-service
        docker-compose exec knowledge-base-service pytest             # Integration test for knowledge-base-service
        docker-compose exec trigger-ai-service pytest                 # Integration test for trigger-ai-service

